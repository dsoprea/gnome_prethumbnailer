#!/usr/bin/env python2.7

import os
import sys
import logging
import logging.handlers

import gi
gi.require_version('GnomeDesktop', '3.0')

import gi.repository
import gi.repository.GnomeDesktop

_PROGRESS_ADD_INTERVAL = 1000
_PROGRESS_VISIT_INTERVAL = 1000

_LOGGER = logging.getLogger('jpeg_thumbnailer')


class _Thumbnailer(object):
    def __init__(self):
        self.__added = 0
        self.__visited = 0
        self.__qualified = 0

    def __make_thumbnail(self, factory, filename):
        mtime = os.path.getmtime(filename)

        # Use Gio to determine the URI and mime type
        f = gi.repository.Gio.file_new_for_path(filename)

        uri = f.get_uri()

        info = f.query_info(
                'standard::content-type',
                gi.repository.Gio.FileQueryInfoFlags.NONE,
                None)

        mime_type = info.get_content_type()

        # Invalid type.

        if mime_type != 'image/jpeg':
            return False

        self.__qualified += 1

        # Already available.
        if factory.lookup(uri, mtime) is not None:
            return False

        can_thumbnail = factory.can_thumbnail(uri, mime_type, mtime)
        if can_thumbnail is False:
            return False

        thumbnail = factory.generate_thumbnail(uri, mime_type)
        if thumbnail is None:
            return False

        factory.save_thumbnail(thumbnail, uri, mtime)

        self.__added += 1

        if self.__added % _PROGRESS_ADD_INTERVAL == 0:
            _LOGGER.info("({}) thumbnails have been generated.".format(
                         self.__added))

        return True

    def __thumbnail_folder(self, factory, folder):

        for dirpath, _, filenames in os.walk(folder):
            for filename in filenames:
            	if filename.startswith('.') is True:
            		continue

                filepath = os.path.join(dirpath, filename)

                self.__make_thumbnail(factory, filepath)
                self.__visited += 1

                if self.__visited % _PROGRESS_VISIT_INTERVAL == 0:
                    _LOGGER.info("({}) files visited.".format(self.__visited))

    def run(self, paths):
        factory = gi.repository.GnomeDesktop.DesktopThumbnailFactory()

        for path in paths:
            self.__thumbnail_folder(factory, path)

    @property
    def added(self):
        return self.__added

    @property
    def visited(self):
        return self.__visited

    @property
    def qualified(self):
        return self.__qualified

def _configure(is_debug=False):
    if is_debug is True:
        _LOGGER.setLevel(logging.DEBUG)
    else:
        _LOGGER.setLevel(logging.INFO)

    sh = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s [%(name)s %(levelname)s] %(message)s')
    sh.setFormatter(formatter)
    _LOGGER.addHandler(sh)

def _main():
    if len(sys.argv) < 2:
        print("No path(s) provided.")
        sys.exit(1)

    _configure()

    t = _Thumbnailer()
    t.run(sys.argv[1:])

    _LOGGER.info("({}) images found.".format(t.qualified))
    _LOGGER.info("({}) thumbnails added.".format(t.added))

if __name__ == '__main__':
    _main()
